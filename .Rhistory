plotfun
ggplot(data = plotfun,
aes(x = ts, y = value, colour = variable)) +
geom_line()
ggplot(data = plotfun,
aes(x = ts, y = value, colour = variable)) +
geom_line(aes(group = 1))
ggplot(data = plotfun,
aes(x = ts, y = value, colour = variable)) +
geom_line(aes(group = 2))
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable,
group = 2)) +
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable,
group = 1)) +
geom_line()
plotfun <- as.data.frame(
cbind(ts = seq(from = 1, to= 7, by= 1),
pred = predicted_output[rtc*44,],
real = as.numeric(y_test[rtc*44,]) ))
p <- ggplot(plotfun)+
geom_line(aes(x = ts, y = real, group = 1), color = 'blue')+
geom_line(aes(x = ts, y = pred, group = 1), color = 'red')
p
plotfun <- reshape2::melt(plotfun, id="ts")
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
scale_y_continuous(limits=c(0, 150))+
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
scale_y_discrete(limits=c(0, 150))+
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
scale_y_discrete(limits=c(0, 150))+
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
ylim(0, 150)+
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
#ylim(0, 150)+
geom_line()
ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
expand_limits(y=c(0,300))+
geom_line()
for(rtc in 1:20){
#rtc<-5
plotfun <- as.data.frame(
cbind(ts = seq(from = 1, to= 7, by= 1),
pred = predicted_output[rtc*44,],
real = as.numeric(y_test[rtc*44,]) ))
plotfun <- reshape2::melt(plotfun, id="ts")
p <- ggplot(data = plotfun,
aes(x = ts,
y = value,
colour = variable)) +
expand_limits(y=c(0,300))+
geom_line()
print(p)
Sys.sleep(2.2)}
library(shiny)
library(plotly)
library(ggplot2)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotlyOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlotly({
hi <- hist(rnorm(input$num))
hi <- cbind(data.frame(hi$counts), data.frame(hi$breaks[-1]))
colnames(hi)<-c('counts','breaks')
print(ggplotly(
ggplot(data=hi,aes(x=breaks,y=counts))+
geom_bar(stat="identity"))
)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
sliderInput(inputId = "num_breaks",
label = "Choose a number of breaks",
value = 5, min = 1, max = 25),
plotlyOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlotly({
hi <- hist(rnorm(input$num),breaks=input$num_breaks)
hi <- cbind(data.frame(hi$counts), data.frame(hi$breaks[-1]))
colnames(hi)<-c('counts','breaks')
print(ggplotly(
ggplot(data=hi,aes(x=breaks,y=counts))+
geom_bar(stat="identity"))
)
})
}
shinyApp(ui = ui, server = server)
library(rpivotTable)
library(tibble)
library(chron)
library(lubridate)
library(zoo)
library(dplyr)
library(reshape)
library(reshape2)
library(plotly)
library(stringr)
library(forecast)
library(xts)
library(numbers)
path = 'C:/Users/a688291/Downloads/Personal/ecobici/'
#path = '/Users/Cristhian/Documents/EcoBici/ecobici/'
data_201701 <- read.csv(file = paste(path,"2017-01.csv", sep = ""),
header = TRUE,
sep=",")
data_201702 <- read.csv(file= paste(path,"2017-02.csv", sep = ""),
header = TRUE,
sep=",")
data_201703 <- read.csv(file= paste(path,"2017-03.csv", sep = ""),
header = TRUE,
sep=",")
data_201701 <- data_201701 %>%
mutate(Fecha_Retiro = case_when(
Fecha_Retiro == '01/02/2017' ~ '02/01/2017',
Fecha_Retiro == '01/03/2017' ~ '03/01/2017',
Fecha_Retiro == '01/04/2017' ~ '04/01/2017',
Fecha_Retiro == '01/05/2017' ~ '05/01/2017',
Fecha_Retiro == '01/06/2017' ~ '06/01/2017',
Fecha_Retiro == '01/07/2017' ~ '07/01/2017',
Fecha_Retiro == '01/08/2017' ~ '08/01/2017',
Fecha_Retiro == '01/09/2017' ~ '09/01/2017',
Fecha_Retiro == '01/10/2017' ~ '10/01/2017',
Fecha_Retiro == '01/11/2017' ~ '11/01/2017',
Fecha_Retiro == '01/12/2017' ~ '12/01/2017',
TRUE ~ as.character(data_201701$Fecha_Retiro )
)) %>%
mutate(Fecha_Arribo = case_when(
Fecha_Arribo == '01/02/2017' ~ '02/01/2017',
Fecha_Arribo == '01/03/2017' ~ '03/01/2017',
Fecha_Arribo == '01/04/2017' ~ '04/01/2017',
Fecha_Arribo == '01/05/2017' ~ '05/01/2017',
Fecha_Arribo == '01/06/2017' ~ '06/01/2017',
Fecha_Arribo == '01/07/2017' ~ '07/01/2017',
Fecha_Arribo == '01/08/2017' ~ '08/01/2017',
Fecha_Arribo == '01/09/2017' ~ '09/01/2017',
Fecha_Arribo == '01/10/2017' ~ '10/01/2017',
Fecha_Arribo == '01/11/2017' ~ '11/01/2017',
Fecha_Arribo == '01/12/2017' ~ '12/01/2017',
TRUE ~ as.character(data_201701$Fecha_Arribo )
))
data_201701 <- data_201701 %>%
select(-X)
data <- rbind(data_201701,data_201702)
data <- rbind(data,data_201703)
data$Fecha_Retiro <- as.Date(data$Fecha_Retiro,"%d/%m/%Y")
data$Fecha_Arribo <- as.Date(data$Fecha_Arribo,"%d/%m/%Y")
data_day_station <- data %>%
group_by(Fecha_Retiro, Ciclo_Estacion_Retiro) %>%
summarise(trips= sum(!is.na(Fecha_Retiro))) %>%
filter(Fecha_Retiro >= as.Date('2017-01-01')) #%>%
#filter(Fecha_Retiro <= as.Date('2017-03-25'))
ToLSTM <- data_day_station %>%
mutate(weekday = format(as.Date(Fecha_Retiro),"%u")) %>%
mutate(monthday = day(as.Date(Fecha_Retiro))) %>%
mutate(weeknumber = strftime(as.Date(Fecha_Retiro),"%V"))
#Number of stations?
(n_stations <- ToLSTM%>%
ungroup()%>%
summarise(n_ciclo = n_distinct(Ciclo_Estacion_Retiro)))
#Number of dates?
(n_days <- ToLSTM%>%
ungroup()%>%
summarise(n_ciclo = n_distinct(Fecha_Retiro)))
library(keras)
(n <-62*448)
(days <- 28)
data_array <- array(data = numeric(n), dim = c(n, days, 8))
week_array <- array(data = numeric(7), dim = c(7,7))
for(i in 1:7){
week_array[i,i]=1
}
#Dictionary of stations
(stations <- ToLSTM%>%
ungroup()%>%
distinct(Ciclo_Estacion_Retiro))
#Dictionary of dates# poner one hot
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(Fecha_Retiro)%>%
mutate(pivot_wk = as.numeric(format(as.Date(Fecha_Retiro),"%u"))))
rowN <- 0
for(i_s in 1:448){
# i_s <- 444 ########
print(i_s)
loop_station <- as.numeric(stations[i_s,1])
data_station <- ToLSTM %>%
filter(Ciclo_Estacion_Retiro == loop_station) %>%
select(Fecha_Retiro, trips, weekday) %>%
arrange(Fecha_Retiro)
dtToArray <- dates_retiro %>%
left_join(data_station, by = 'Fecha_Retiro' )
dtToArray <- dtToArray %>%
mutate(trips = ifelse(!is.na(trips), trips, 0),
weekday = ifelse(!is.na(weekday), weekday, pivot_wk))%>%
select(Fecha_Retiro, trips, weekday)
for(k_w in 1:startDate){
# k_w <- 1 ########
rowN <- rowN + 1
dq <- dates_retiro$Fecha_Retiro[k_w]
dt_from <- as.Date(dq)
dt_to   <- as.Date(dq) + 27
data_point <- dtToArray %>%
ungroup()%>%
filter(Fecha_Retiro >= as.Date(dt_from) & Fecha_Retiro <= as.Date(dt_to)) %>%
select(trips, weekday)
data_array[rowN ,  , 1 ] <- dplyr::pull(data_point,trips)
data_array[rowN ,  , -1 ] <- week_array[ as.numeric(dplyr::pull(data_point,weekday)), ]
}
}
startDate <- dim(dates_retiro)[1] - 28
startDate
rowN <- 0
for(i_s in 1:448){
# i_s <- 444 ########
print(i_s)
loop_station <- as.numeric(stations[i_s,1])
data_station <- ToLSTM %>%
filter(Ciclo_Estacion_Retiro == loop_station) %>%
select(Fecha_Retiro, trips, weekday) %>%
arrange(Fecha_Retiro)
dtToArray <- dates_retiro %>%
left_join(data_station, by = 'Fecha_Retiro' )
dtToArray <- dtToArray %>%
mutate(trips = ifelse(!is.na(trips), trips, 0),
weekday = ifelse(!is.na(weekday), weekday, pivot_wk))%>%
select(Fecha_Retiro, trips, weekday)
for(k_w in 1:startDate){
# k_w <- 1 ########
rowN <- rowN + 1
dq <- dates_retiro$Fecha_Retiro[k_w]
dt_from <- as.Date(dq)
dt_to   <- as.Date(dq) + 27
data_point <- dtToArray %>%
ungroup()%>%
filter(Fecha_Retiro >= as.Date(dt_from) & Fecha_Retiro <= as.Date(dt_to)) %>%
select(trips, weekday)
data_array[rowN ,  , 1 ] <- dplyr::pull(data_point,trips)
data_array[rowN ,  , -1 ] <- week_array[ as.numeric(dplyr::pull(data_point,weekday)), ]
}
}
set.seed(12345)
nt <- floor(dim(data_array)[1]*0.75)
train <-sample(dim(data_array)[1], nt )
#divisors(20832)
x_train <- data_array[ train , 1:21,  ]
#x_train <- array_reshape(x = x_train, dim = list(nt, 21, 2))
y_train <- data_array[ train , 22:28, 1]
x_test <- data_array[ -train , 1:21,  ]
#x_test <- array_reshape(x = x_test, dim = list(dim(data_array)[1]-nt, 21, 2) )
y_test <- data_array[ -train, 22:28, 1]
dim(x_train)
dim(y_train)
dim(x_test)
dim(y_test)
#divisors(25872)
batch_size <- 32 #56
epochs <- 20
cat('Creating model:\n')
model <- keras_model_sequential()
model %>%
layer_lstm(units = 75, input_shape = c( 21, 8), batch_size = batch_size,
return_sequences = TRUE, stateful = TRUE) %>%
layer_dropout(rate = 0.5) %>%
layer_lstm(units = 75, return_sequences = FALSE, stateful = TRUE) %>%
layer_dense(units = 7)
summary(model)
rmsprop <- optimizer_rmsprop(lr=0.005)
adm <- optimizer_adam(lr=0.0005)
model %>% compile(loss = 'mse',
optimizer = adm#,
#metrics = c('mse')
)
history <- model %>% fit(
x_train, y_train,
batch_size = batch_size,
epochs = epochs,
verbose = 1,
validation_data = list(x_test, y_test),
shuffle = TRUE)
keras_save
getwd()
setwd('C:\Users\a688291\Documents\EDA_CRJR\EcoBiciDS')
setwd('C:/Users/a688291/Documents/EDA_CRJR/EcoBiciDS')
save_model_hdf5(model,'ecobici.h5')
mimodel <- load_model_hdf5('ecobici.h5')
attributes(mimodel)
predicted_output <- mimodel %>%
predict(x_test, batch_size = batch_size)
library(rpivotTable)
library(tibble)
library(chron)
library(lubridate)
library(zoo)
library(dplyr)
library(reshape)
library(reshape2)
library(plotly)
library(stringr)
library(forecast)
library(xts)
library(numbers)
library(keras)
path = 'C:/Users/a688291/Downloads/Personal/ecobici/'
#path = '/Users/Cristhian/Documents/EcoBici/ecobici/'
data_201701 <- read.csv(file = paste(path,"2017-01.csv", sep = ""),
header = TRUE,
sep=",")
data_201701 <- data_201701 %>%
mutate(Fecha_Retiro = case_when(
Fecha_Retiro == '01/02/2017' ~ '02/01/2017',
Fecha_Retiro == '01/03/2017' ~ '03/01/2017',
Fecha_Retiro == '01/04/2017' ~ '04/01/2017',
Fecha_Retiro == '01/05/2017' ~ '05/01/2017',
Fecha_Retiro == '01/06/2017' ~ '06/01/2017',
Fecha_Retiro == '01/07/2017' ~ '07/01/2017',
Fecha_Retiro == '01/08/2017' ~ '08/01/2017',
Fecha_Retiro == '01/09/2017' ~ '09/01/2017',
Fecha_Retiro == '01/10/2017' ~ '10/01/2017',
Fecha_Retiro == '01/11/2017' ~ '11/01/2017',
Fecha_Retiro == '01/12/2017' ~ '12/01/2017',
TRUE ~ as.character(data_201701$Fecha_Retiro )
)) %>%
mutate(Fecha_Arribo = case_when(
Fecha_Arribo == '01/02/2017' ~ '02/01/2017',
Fecha_Arribo == '01/03/2017' ~ '03/01/2017',
Fecha_Arribo == '01/04/2017' ~ '04/01/2017',
Fecha_Arribo == '01/05/2017' ~ '05/01/2017',
Fecha_Arribo == '01/06/2017' ~ '06/01/2017',
Fecha_Arribo == '01/07/2017' ~ '07/01/2017',
Fecha_Arribo == '01/08/2017' ~ '08/01/2017',
Fecha_Arribo == '01/09/2017' ~ '09/01/2017',
Fecha_Arribo == '01/10/2017' ~ '10/01/2017',
Fecha_Arribo == '01/11/2017' ~ '11/01/2017',
Fecha_Arribo == '01/12/2017' ~ '12/01/2017',
TRUE ~ as.character(data_201701$Fecha_Arribo )
))
data <- data_201701 %>%
select(-X)
data$Fecha_Retiro <- as.Date(data$Fecha_Retiro,"%d/%m/%Y")
data$Fecha_Arribo <- as.Date(data$Fecha_Arribo,"%d/%m/%Y")
data <- data %>%
mutate(dt_time = ymd_hms(paste(Fecha_Retiro, Hora_Retiro))) %>%
mutate(h = floor_date(dt_time, unit = "hours")) %>%
mutate(Hora_Retiro_Gut = hour(as_datetime( Hora_Retiro)))
data <- data_201701 %>%
select(-X)
data$Fecha_Retiro <- as.Date(data$Fecha_Retiro,"%d/%m/%Y")
data$Fecha_Arribo <- as.Date(data$Fecha_Arribo,"%d/%m/%Y")
View(data)
data <- data %>%
mutate(dt_time = ymd_hms(paste(Fecha_Retiro, Hora_Retiro))) %>%
mutate(h = floor_date(dt_time, unit = "hours")) %>%
mutate(Hora_Retiro_Gut = hour(as_datetime( Hora_Retiro)))
data <- data %>%
mutate(dt_time = ymd_hms(paste(Fecha_Retiro, Hora_Retiro))) %>%
mutate(h = floor_date(dt_time, unit = "hours"))
View(head(data))
View(data)
data_day <- data %>%
group_by(h, Genero_Usuario) %>%
summarise(trips= sum(!is.na(h))) %>%
filter(h >= as.Date('2017-01-01'))
data_hour <- data %>%
group_by(h, Genero_Usuario) %>%
summarise(trips= sum(!is.na(h))) %>%
filter(h >= as.Date('2017-01-01'))
data_day %>%
ungroup() %>%
group_by(Genero_Usuario) %>%
summarise(trips= sum(trips))
p <- ggplot(data = data_day, aes(x = h, y = trips)) +
geom_line(group=1) +
geom_point()+
xlab("Date")+
ylab("Number of trips")+
facet_wrap(~Genero_Usuario, ncol=1)
ggplotly(p)
p<- ggplot(data = data_day,
aes(x = h,
y = trips,
colour = Genero_Usuario )) +
geom_line()
ggplotly(p)
p<- ggplot(data = data_day,
aes(x = h,
y = trips,
colour = Genero_Usuario )) +
geom_line(group=1) +
geom_point()
ggplotly(p)
p<- ggplot(data = data_day,
aes(x = h,
y = trips,
colour = Genero_Usuario )) +
geom_line(group=1)
ggplotly(p)
p<- ggplot(data = data_day,
aes(x = h,
y = trips,
colour = Genero_Usuario )) +
geom_line(group=1) +
geom_point()+
xlab("Date")+
ylab("Number of trips")
ggplotly(p)
datetime <- data%>%
ungroup()%>%
group_by(Fecha_Retiro) %>%
summarise(hours_per_day = n_distinct(h))
ToLSTM <- data %>%
group_by(h, Ciclo_Estacion_Retiro) %>%
summarise(trips= sum(!is.na(h))) %>%
filter(h >= as.Date('2017-01-01'))
View(ToLSTM)
(stations <- ToLSTM%>%
ungroup()%>%
distinct(Ciclo_Estacion_Retiro))
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h)%>%
mutate(pivot_h = as.numeric(hour(as.Date(h))))%>%
select(-Fecha_Retiro))
View(ToLSTM)
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h)%>%
mutate(pivot_h = as.numeric(hour(as.Date(h)))))
dates_retiro
View(dates_retiro)
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h)%>%
mutate(pivot_h = 0  )%>%
select(-Fecha_Retiro))
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h)%>%
mutate(pivot_h = 0  )%>%
select(-Fecha_Retiro))
View(dates_retiro)
length(dates_retiro)
length(dates_retiro$h)
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h)%>%
mutate(pivot_h = seq(from = 1, to = length(dates_retiro$h), by = 1)  )%>%
select(-Fecha_Retiro))
View(dates_retiro)
data.frame(seq(from = 1, to = length(dates_retiro$h), by = 1) )
(dates_retiro <- ToLSTM%>%
ungroup()%>%
distinct(h))
dates_retiro <- cbind(dates_retiro,data.frame(seq(from = 1, to = length(dates_retiro$h), by = 1) ))
dates_retiro
View(dates_retiro)
colnames(dates_retiro) <- c('h','n_H')
View(dates_retiro)
colnames(dates_retiro) <- c('h','n_h')
View(dates_retiro)
(hours <- 120)
(n <- (20*31 - 120) * 447)
data_array <- array(data = numeric(n), dim = c(n, hours, 1 + 20))
hour_array <- array(data = numeric(20), dim = c(20,20))
for(i in 1:20){
hour_array[i,i]=1
}
hour_array
